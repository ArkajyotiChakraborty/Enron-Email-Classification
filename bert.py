# -*- coding: utf-8 -*-
"""bert.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WvjwjeXATFt-ZN2-TvDoCbosb5shLY58
"""

import os
import email
import numpy as np
import pandas as pd
from nltk.tokenize.regexp import RegexpTokenizer

df = pd.read_csv('clean_csv_2.csv')
df = df.dropna(axis = 0)
label_map = {1.1: 0, 1.2: 1, 1.3: 2, 1.4: 3, 1.5: 4, 1.6: 5}
df['label_value'] = df['label'].map(label_map)
df = df.sample(frac = 1, random_state  =42)
df

df2.to_csv('final_data.csv', index=False)

df2 = pd.DataFrame({
    'email_content': list(df['clean_content']),
    'label': list(df['label_value'])})

df2

!pip install transformers

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from transformers import BertTokenizer, BertForSequenceClassification, AdamW
import torch
from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler

train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

model_name = "bert-large-uncased" # Change Model Name
tokenizer = BertTokenizer.from_pretrained(model_name)
model = BertForSequenceClassification.from_pretrained(model_name, num_labels = 6)


def tokenize_data(data, tokenizer, max_length=128):
    input_ids = []
    attention_masks = []

    for text in data["clean_content"]:
        encoded_data = tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            max_length=max_length,
            pad_to_max_length=True,
            return_attention_mask=True,
            return_tensors="pt",
        )
        input_ids.append(encoded_data["input_ids"])
        attention_masks.append(encoded_data["attention_mask"])

    input_ids = torch.cat(input_ids, dim=0)
    attention_masks = torch.cat(attention_masks, dim=0)
    labels = torch.tensor(data["label_value"].values)

    dataset = TensorDataset(input_ids, attention_masks, labels)
    dataloader = DataLoader(
        dataset, sampler=RandomSampler(dataset), batch_size=32
    )

    return dataloader

train_dataloader = tokenize_data(train_data, tokenizer)
test_dataloader = tokenize_data(test_data, tokenizer)

# Set up GPU if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Define the optimizer and learning rate scheduler
optimizer = AdamW(model.parameters(), lr=2e-5)
scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=1, gamma=0.9)

# Training loop
num_epochs = 10  # You can adjust the number of epochs
for epoch in range(num_epochs):
    model.train()
    total_loss = 0.0
    for batch in train_dataloader:
        batch = tuple(t.to(device) for t in batch)
        inputs = {"input_ids": batch[0], "attention_mask": batch[1], "labels": batch[2]}

        optimizer.zero_grad()
        outputs = model(**inputs)
        loss = outputs.loss
        total_loss += loss.item()
        loss.backward()
        optimizer.step()

    avg_train_loss = total_loss / len(train_dataloader)

    print(f"Epoch {epoch+1}/{num_epochs}, Average Training Loss: {avg_train_loss}")

# Evaluation on test data
model.eval()
test_labels = []
predicted_labels = []
with torch.no_grad():
    for batch in test_dataloader:
        batch = tuple(t.to(device) for t in batch)
        inputs = {"input_ids": batch[0], "attention_mask": batch[1], "labels": None}

        outputs = model(**inputs)
        logits = outputs.logits
        predicted_batch = np.argmax(logits.detach().cpu().numpy(), axis=1)
        predicted_labels.extend(predicted_batch)
        test_labels.extend(batch[2].cpu().numpy())

print("Classification Report:")
print(classification_report(test_labels, predicted_labels, target_names=label_mapping.keys()))